/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WikiMediaChange implements org.apache.thrift.TBase<WikiMediaChange, WikiMediaChange._Fields>, java.io.Serializable, Cloneable, Comparable<WikiMediaChange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WikiMediaChange");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RC_NAMESPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("rc_namespace", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BOT_FIELD_DESC = new org.apache.thrift.protocol.TField("bot", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField SERVER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("server_url", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("server_name", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SERVER_SCRIPT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("server_script_path", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField WIKI_FIELD_DESC = new org.apache.thrift.protocol.TField("wiki", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MINOR_FIELD_DESC = new org.apache.thrift.protocol.TField("minor", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField PATROLLED_FIELD_DESC = new org.apache.thrift.protocol.TField("patrolled", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField LENGTH_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField("length_old", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LENGTH_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("length_new", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REVISION_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField("revision_old", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField REVISION_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("revision_new", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField LOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("log_id", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LOG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("log_type", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LOG_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("log_action", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField LOG_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("log_params", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField LOG_ACTION_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("log_action_comment", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WikiMediaChangeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WikiMediaChangeTupleSchemeFactory());
  }

  public String id; // required
  public int type; // required
  public int rc_namespace; // required
  public String title; // required
  public String comment; // required
  public int timestamp; // required
  public String user; // required
  public boolean bot; // required
  public String server_url; // required
  public String server_name; // required
  public String server_script_path; // required
  public String wiki; // required
  public boolean minor; // optional
  public boolean patrolled; // optional
  public int length_old; // optional
  public int length_new; // optional
  public int revision_old; // optional
  public int revision_new; // optional
  public String log_id; // optional
  public String log_type; // optional
  public String log_action; // optional
  public String log_params; // optional
  public String log_action_comment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TYPE((short)2, "type"),
    RC_NAMESPACE((short)3, "rc_namespace"),
    TITLE((short)4, "title"),
    COMMENT((short)5, "comment"),
    TIMESTAMP((short)6, "timestamp"),
    USER((short)7, "user"),
    BOT((short)8, "bot"),
    SERVER_URL((short)9, "server_url"),
    SERVER_NAME((short)10, "server_name"),
    SERVER_SCRIPT_PATH((short)11, "server_script_path"),
    WIKI((short)12, "wiki"),
    MINOR((short)13, "minor"),
    PATROLLED((short)14, "patrolled"),
    LENGTH_OLD((short)15, "length_old"),
    LENGTH_NEW((short)16, "length_new"),
    REVISION_OLD((short)17, "revision_old"),
    REVISION_NEW((short)18, "revision_new"),
    LOG_ID((short)19, "log_id"),
    LOG_TYPE((short)20, "log_type"),
    LOG_ACTION((short)21, "log_action"),
    LOG_PARAMS((short)22, "log_params"),
    LOG_ACTION_COMMENT((short)23, "log_action_comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // RC_NAMESPACE
          return RC_NAMESPACE;
        case 4: // TITLE
          return TITLE;
        case 5: // COMMENT
          return COMMENT;
        case 6: // TIMESTAMP
          return TIMESTAMP;
        case 7: // USER
          return USER;
        case 8: // BOT
          return BOT;
        case 9: // SERVER_URL
          return SERVER_URL;
        case 10: // SERVER_NAME
          return SERVER_NAME;
        case 11: // SERVER_SCRIPT_PATH
          return SERVER_SCRIPT_PATH;
        case 12: // WIKI
          return WIKI;
        case 13: // MINOR
          return MINOR;
        case 14: // PATROLLED
          return PATROLLED;
        case 15: // LENGTH_OLD
          return LENGTH_OLD;
        case 16: // LENGTH_NEW
          return LENGTH_NEW;
        case 17: // REVISION_OLD
          return REVISION_OLD;
        case 18: // REVISION_NEW
          return REVISION_NEW;
        case 19: // LOG_ID
          return LOG_ID;
        case 20: // LOG_TYPE
          return LOG_TYPE;
        case 21: // LOG_ACTION
          return LOG_ACTION;
        case 22: // LOG_PARAMS
          return LOG_PARAMS;
        case 23: // LOG_ACTION_COMMENT
          return LOG_ACTION_COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __RC_NAMESPACE_ISSET_ID = 1;
  private static final int __TIMESTAMP_ISSET_ID = 2;
  private static final int __BOT_ISSET_ID = 3;
  private static final int __MINOR_ISSET_ID = 4;
  private static final int __PATROLLED_ISSET_ID = 5;
  private static final int __LENGTH_OLD_ISSET_ID = 6;
  private static final int __LENGTH_NEW_ISSET_ID = 7;
  private static final int __REVISION_OLD_ISSET_ID = 8;
  private static final int __REVISION_NEW_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MINOR,_Fields.PATROLLED,_Fields.LENGTH_OLD,_Fields.LENGTH_NEW,_Fields.REVISION_OLD,_Fields.REVISION_NEW,_Fields.LOG_ID,_Fields.LOG_TYPE,_Fields.LOG_ACTION,_Fields.LOG_PARAMS,_Fields.LOG_ACTION_COMMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RC_NAMESPACE, new org.apache.thrift.meta_data.FieldMetaData("rc_namespace", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOT, new org.apache.thrift.meta_data.FieldMetaData("bot", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERVER_URL, new org.apache.thrift.meta_data.FieldMetaData("server_url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("server_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_SCRIPT_PATH, new org.apache.thrift.meta_data.FieldMetaData("server_script_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WIKI, new org.apache.thrift.meta_data.FieldMetaData("wiki", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MINOR, new org.apache.thrift.meta_data.FieldMetaData("minor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PATROLLED, new org.apache.thrift.meta_data.FieldMetaData("patrolled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LENGTH_OLD, new org.apache.thrift.meta_data.FieldMetaData("length_old", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LENGTH_NEW, new org.apache.thrift.meta_data.FieldMetaData("length_new", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REVISION_OLD, new org.apache.thrift.meta_data.FieldMetaData("revision_old", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REVISION_NEW, new org.apache.thrift.meta_data.FieldMetaData("revision_new", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOG_ID, new org.apache.thrift.meta_data.FieldMetaData("log_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("log_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_ACTION, new org.apache.thrift.meta_data.FieldMetaData("log_action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("log_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_ACTION_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("log_action_comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WikiMediaChange.class, metaDataMap);
  }

  public WikiMediaChange() {
  }

  public WikiMediaChange(
    String id,
    int type,
    int rc_namespace,
    String title,
    String comment,
    int timestamp,
    String user,
    boolean bot,
    String server_url,
    String server_name,
    String server_script_path,
    String wiki)
  {
    this();
    this.id = id;
    this.type = type;
    setTypeIsSet(true);
    this.rc_namespace = rc_namespace;
    setRc_namespaceIsSet(true);
    this.title = title;
    this.comment = comment;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.user = user;
    this.bot = bot;
    setBotIsSet(true);
    this.server_url = server_url;
    this.server_name = server_name;
    this.server_script_path = server_script_path;
    this.wiki = wiki;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WikiMediaChange(WikiMediaChange other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.type = other.type;
    this.rc_namespace = other.rc_namespace;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    this.timestamp = other.timestamp;
    if (other.isSetUser()) {
      this.user = other.user;
    }
    this.bot = other.bot;
    if (other.isSetServer_url()) {
      this.server_url = other.server_url;
    }
    if (other.isSetServer_name()) {
      this.server_name = other.server_name;
    }
    if (other.isSetServer_script_path()) {
      this.server_script_path = other.server_script_path;
    }
    if (other.isSetWiki()) {
      this.wiki = other.wiki;
    }
    this.minor = other.minor;
    this.patrolled = other.patrolled;
    this.length_old = other.length_old;
    this.length_new = other.length_new;
    this.revision_old = other.revision_old;
    this.revision_new = other.revision_new;
    if (other.isSetLog_id()) {
      this.log_id = other.log_id;
    }
    if (other.isSetLog_type()) {
      this.log_type = other.log_type;
    }
    if (other.isSetLog_action()) {
      this.log_action = other.log_action;
    }
    if (other.isSetLog_params()) {
      this.log_params = other.log_params;
    }
    if (other.isSetLog_action_comment()) {
      this.log_action_comment = other.log_action_comment;
    }
  }

  public WikiMediaChange deepCopy() {
    return new WikiMediaChange(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setTypeIsSet(false);
    this.type = 0;
    setRc_namespaceIsSet(false);
    this.rc_namespace = 0;
    this.title = null;
    this.comment = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.user = null;
    setBotIsSet(false);
    this.bot = false;
    this.server_url = null;
    this.server_name = null;
    this.server_script_path = null;
    this.wiki = null;
    setMinorIsSet(false);
    this.minor = false;
    setPatrolledIsSet(false);
    this.patrolled = false;
    setLength_oldIsSet(false);
    this.length_old = 0;
    setLength_newIsSet(false);
    this.length_new = 0;
    setRevision_oldIsSet(false);
    this.revision_old = 0;
    setRevision_newIsSet(false);
    this.revision_new = 0;
    this.log_id = null;
    this.log_type = null;
    this.log_action = null;
    this.log_params = null;
    this.log_action_comment = null;
  }

  public String getId() {
    return this.id;
  }

  public WikiMediaChange setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public WikiMediaChange setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getRc_namespace() {
    return this.rc_namespace;
  }

  public WikiMediaChange setRc_namespace(int rc_namespace) {
    this.rc_namespace = rc_namespace;
    setRc_namespaceIsSet(true);
    return this;
  }

  public void unsetRc_namespace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RC_NAMESPACE_ISSET_ID);
  }

  /** Returns true if field rc_namespace is set (has been assigned a value) and false otherwise */
  public boolean isSetRc_namespace() {
    return EncodingUtils.testBit(__isset_bitfield, __RC_NAMESPACE_ISSET_ID);
  }

  public void setRc_namespaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RC_NAMESPACE_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public WikiMediaChange setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public WikiMediaChange setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public int getTimestamp() {
    return this.timestamp;
  }

  public WikiMediaChange setTimestamp(int timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getUser() {
    return this.user;
  }

  public WikiMediaChange setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public boolean isBot() {
    return this.bot;
  }

  public WikiMediaChange setBot(boolean bot) {
    this.bot = bot;
    setBotIsSet(true);
    return this;
  }

  public void unsetBot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOT_ISSET_ID);
  }

  /** Returns true if field bot is set (has been assigned a value) and false otherwise */
  public boolean isSetBot() {
    return EncodingUtils.testBit(__isset_bitfield, __BOT_ISSET_ID);
  }

  public void setBotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOT_ISSET_ID, value);
  }

  public String getServer_url() {
    return this.server_url;
  }

  public WikiMediaChange setServer_url(String server_url) {
    this.server_url = server_url;
    return this;
  }

  public void unsetServer_url() {
    this.server_url = null;
  }

  /** Returns true if field server_url is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_url() {
    return this.server_url != null;
  }

  public void setServer_urlIsSet(boolean value) {
    if (!value) {
      this.server_url = null;
    }
  }

  public String getServer_name() {
    return this.server_name;
  }

  public WikiMediaChange setServer_name(String server_name) {
    this.server_name = server_name;
    return this;
  }

  public void unsetServer_name() {
    this.server_name = null;
  }

  /** Returns true if field server_name is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_name() {
    return this.server_name != null;
  }

  public void setServer_nameIsSet(boolean value) {
    if (!value) {
      this.server_name = null;
    }
  }

  public String getServer_script_path() {
    return this.server_script_path;
  }

  public WikiMediaChange setServer_script_path(String server_script_path) {
    this.server_script_path = server_script_path;
    return this;
  }

  public void unsetServer_script_path() {
    this.server_script_path = null;
  }

  /** Returns true if field server_script_path is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_script_path() {
    return this.server_script_path != null;
  }

  public void setServer_script_pathIsSet(boolean value) {
    if (!value) {
      this.server_script_path = null;
    }
  }

  public String getWiki() {
    return this.wiki;
  }

  public WikiMediaChange setWiki(String wiki) {
    this.wiki = wiki;
    return this;
  }

  public void unsetWiki() {
    this.wiki = null;
  }

  /** Returns true if field wiki is set (has been assigned a value) and false otherwise */
  public boolean isSetWiki() {
    return this.wiki != null;
  }

  public void setWikiIsSet(boolean value) {
    if (!value) {
      this.wiki = null;
    }
  }

  public boolean isMinor() {
    return this.minor;
  }

  public WikiMediaChange setMinor(boolean minor) {
    this.minor = minor;
    setMinorIsSet(true);
    return this;
  }

  public void unsetMinor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINOR_ISSET_ID);
  }

  /** Returns true if field minor is set (has been assigned a value) and false otherwise */
  public boolean isSetMinor() {
    return EncodingUtils.testBit(__isset_bitfield, __MINOR_ISSET_ID);
  }

  public void setMinorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINOR_ISSET_ID, value);
  }

  public boolean isPatrolled() {
    return this.patrolled;
  }

  public WikiMediaChange setPatrolled(boolean patrolled) {
    this.patrolled = patrolled;
    setPatrolledIsSet(true);
    return this;
  }

  public void unsetPatrolled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATROLLED_ISSET_ID);
  }

  /** Returns true if field patrolled is set (has been assigned a value) and false otherwise */
  public boolean isSetPatrolled() {
    return EncodingUtils.testBit(__isset_bitfield, __PATROLLED_ISSET_ID);
  }

  public void setPatrolledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATROLLED_ISSET_ID, value);
  }

  public int getLength_old() {
    return this.length_old;
  }

  public WikiMediaChange setLength_old(int length_old) {
    this.length_old = length_old;
    setLength_oldIsSet(true);
    return this;
  }

  public void unsetLength_old() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_OLD_ISSET_ID);
  }

  /** Returns true if field length_old is set (has been assigned a value) and false otherwise */
  public boolean isSetLength_old() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_OLD_ISSET_ID);
  }

  public void setLength_oldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_OLD_ISSET_ID, value);
  }

  public int getLength_new() {
    return this.length_new;
  }

  public WikiMediaChange setLength_new(int length_new) {
    this.length_new = length_new;
    setLength_newIsSet(true);
    return this;
  }

  public void unsetLength_new() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_NEW_ISSET_ID);
  }

  /** Returns true if field length_new is set (has been assigned a value) and false otherwise */
  public boolean isSetLength_new() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_NEW_ISSET_ID);
  }

  public void setLength_newIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_NEW_ISSET_ID, value);
  }

  public int getRevision_old() {
    return this.revision_old;
  }

  public WikiMediaChange setRevision_old(int revision_old) {
    this.revision_old = revision_old;
    setRevision_oldIsSet(true);
    return this;
  }

  public void unsetRevision_old() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVISION_OLD_ISSET_ID);
  }

  /** Returns true if field revision_old is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision_old() {
    return EncodingUtils.testBit(__isset_bitfield, __REVISION_OLD_ISSET_ID);
  }

  public void setRevision_oldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVISION_OLD_ISSET_ID, value);
  }

  public int getRevision_new() {
    return this.revision_new;
  }

  public WikiMediaChange setRevision_new(int revision_new) {
    this.revision_new = revision_new;
    setRevision_newIsSet(true);
    return this;
  }

  public void unsetRevision_new() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVISION_NEW_ISSET_ID);
  }

  /** Returns true if field revision_new is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision_new() {
    return EncodingUtils.testBit(__isset_bitfield, __REVISION_NEW_ISSET_ID);
  }

  public void setRevision_newIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVISION_NEW_ISSET_ID, value);
  }

  public String getLog_id() {
    return this.log_id;
  }

  public WikiMediaChange setLog_id(String log_id) {
    this.log_id = log_id;
    return this;
  }

  public void unsetLog_id() {
    this.log_id = null;
  }

  /** Returns true if field log_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_id() {
    return this.log_id != null;
  }

  public void setLog_idIsSet(boolean value) {
    if (!value) {
      this.log_id = null;
    }
  }

  public String getLog_type() {
    return this.log_type;
  }

  public WikiMediaChange setLog_type(String log_type) {
    this.log_type = log_type;
    return this;
  }

  public void unsetLog_type() {
    this.log_type = null;
  }

  /** Returns true if field log_type is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_type() {
    return this.log_type != null;
  }

  public void setLog_typeIsSet(boolean value) {
    if (!value) {
      this.log_type = null;
    }
  }

  public String getLog_action() {
    return this.log_action;
  }

  public WikiMediaChange setLog_action(String log_action) {
    this.log_action = log_action;
    return this;
  }

  public void unsetLog_action() {
    this.log_action = null;
  }

  /** Returns true if field log_action is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_action() {
    return this.log_action != null;
  }

  public void setLog_actionIsSet(boolean value) {
    if (!value) {
      this.log_action = null;
    }
  }

  public String getLog_params() {
    return this.log_params;
  }

  public WikiMediaChange setLog_params(String log_params) {
    this.log_params = log_params;
    return this;
  }

  public void unsetLog_params() {
    this.log_params = null;
  }

  /** Returns true if field log_params is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_params() {
    return this.log_params != null;
  }

  public void setLog_paramsIsSet(boolean value) {
    if (!value) {
      this.log_params = null;
    }
  }

  public String getLog_action_comment() {
    return this.log_action_comment;
  }

  public WikiMediaChange setLog_action_comment(String log_action_comment) {
    this.log_action_comment = log_action_comment;
    return this;
  }

  public void unsetLog_action_comment() {
    this.log_action_comment = null;
  }

  /** Returns true if field log_action_comment is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_action_comment() {
    return this.log_action_comment != null;
  }

  public void setLog_action_commentIsSet(boolean value) {
    if (!value) {
      this.log_action_comment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case RC_NAMESPACE:
      if (value == null) {
        unsetRc_namespace();
      } else {
        setRc_namespace((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Integer)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case BOT:
      if (value == null) {
        unsetBot();
      } else {
        setBot((Boolean)value);
      }
      break;

    case SERVER_URL:
      if (value == null) {
        unsetServer_url();
      } else {
        setServer_url((String)value);
      }
      break;

    case SERVER_NAME:
      if (value == null) {
        unsetServer_name();
      } else {
        setServer_name((String)value);
      }
      break;

    case SERVER_SCRIPT_PATH:
      if (value == null) {
        unsetServer_script_path();
      } else {
        setServer_script_path((String)value);
      }
      break;

    case WIKI:
      if (value == null) {
        unsetWiki();
      } else {
        setWiki((String)value);
      }
      break;

    case MINOR:
      if (value == null) {
        unsetMinor();
      } else {
        setMinor((Boolean)value);
      }
      break;

    case PATROLLED:
      if (value == null) {
        unsetPatrolled();
      } else {
        setPatrolled((Boolean)value);
      }
      break;

    case LENGTH_OLD:
      if (value == null) {
        unsetLength_old();
      } else {
        setLength_old((Integer)value);
      }
      break;

    case LENGTH_NEW:
      if (value == null) {
        unsetLength_new();
      } else {
        setLength_new((Integer)value);
      }
      break;

    case REVISION_OLD:
      if (value == null) {
        unsetRevision_old();
      } else {
        setRevision_old((Integer)value);
      }
      break;

    case REVISION_NEW:
      if (value == null) {
        unsetRevision_new();
      } else {
        setRevision_new((Integer)value);
      }
      break;

    case LOG_ID:
      if (value == null) {
        unsetLog_id();
      } else {
        setLog_id((String)value);
      }
      break;

    case LOG_TYPE:
      if (value == null) {
        unsetLog_type();
      } else {
        setLog_type((String)value);
      }
      break;

    case LOG_ACTION:
      if (value == null) {
        unsetLog_action();
      } else {
        setLog_action((String)value);
      }
      break;

    case LOG_PARAMS:
      if (value == null) {
        unsetLog_params();
      } else {
        setLog_params((String)value);
      }
      break;

    case LOG_ACTION_COMMENT:
      if (value == null) {
        unsetLog_action_comment();
      } else {
        setLog_action_comment((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TYPE:
      return Integer.valueOf(getType());

    case RC_NAMESPACE:
      return Integer.valueOf(getRc_namespace());

    case TITLE:
      return getTitle();

    case COMMENT:
      return getComment();

    case TIMESTAMP:
      return Integer.valueOf(getTimestamp());

    case USER:
      return getUser();

    case BOT:
      return Boolean.valueOf(isBot());

    case SERVER_URL:
      return getServer_url();

    case SERVER_NAME:
      return getServer_name();

    case SERVER_SCRIPT_PATH:
      return getServer_script_path();

    case WIKI:
      return getWiki();

    case MINOR:
      return Boolean.valueOf(isMinor());

    case PATROLLED:
      return Boolean.valueOf(isPatrolled());

    case LENGTH_OLD:
      return Integer.valueOf(getLength_old());

    case LENGTH_NEW:
      return Integer.valueOf(getLength_new());

    case REVISION_OLD:
      return Integer.valueOf(getRevision_old());

    case REVISION_NEW:
      return Integer.valueOf(getRevision_new());

    case LOG_ID:
      return getLog_id();

    case LOG_TYPE:
      return getLog_type();

    case LOG_ACTION:
      return getLog_action();

    case LOG_PARAMS:
      return getLog_params();

    case LOG_ACTION_COMMENT:
      return getLog_action_comment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case RC_NAMESPACE:
      return isSetRc_namespace();
    case TITLE:
      return isSetTitle();
    case COMMENT:
      return isSetComment();
    case TIMESTAMP:
      return isSetTimestamp();
    case USER:
      return isSetUser();
    case BOT:
      return isSetBot();
    case SERVER_URL:
      return isSetServer_url();
    case SERVER_NAME:
      return isSetServer_name();
    case SERVER_SCRIPT_PATH:
      return isSetServer_script_path();
    case WIKI:
      return isSetWiki();
    case MINOR:
      return isSetMinor();
    case PATROLLED:
      return isSetPatrolled();
    case LENGTH_OLD:
      return isSetLength_old();
    case LENGTH_NEW:
      return isSetLength_new();
    case REVISION_OLD:
      return isSetRevision_old();
    case REVISION_NEW:
      return isSetRevision_new();
    case LOG_ID:
      return isSetLog_id();
    case LOG_TYPE:
      return isSetLog_type();
    case LOG_ACTION:
      return isSetLog_action();
    case LOG_PARAMS:
      return isSetLog_params();
    case LOG_ACTION_COMMENT:
      return isSetLog_action_comment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WikiMediaChange)
      return this.equals((WikiMediaChange)that);
    return false;
  }

  public boolean equals(WikiMediaChange that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_rc_namespace = true;
    boolean that_present_rc_namespace = true;
    if (this_present_rc_namespace || that_present_rc_namespace) {
      if (!(this_present_rc_namespace && that_present_rc_namespace))
        return false;
      if (this.rc_namespace != that.rc_namespace)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_bot = true;
    boolean that_present_bot = true;
    if (this_present_bot || that_present_bot) {
      if (!(this_present_bot && that_present_bot))
        return false;
      if (this.bot != that.bot)
        return false;
    }

    boolean this_present_server_url = true && this.isSetServer_url();
    boolean that_present_server_url = true && that.isSetServer_url();
    if (this_present_server_url || that_present_server_url) {
      if (!(this_present_server_url && that_present_server_url))
        return false;
      if (!this.server_url.equals(that.server_url))
        return false;
    }

    boolean this_present_server_name = true && this.isSetServer_name();
    boolean that_present_server_name = true && that.isSetServer_name();
    if (this_present_server_name || that_present_server_name) {
      if (!(this_present_server_name && that_present_server_name))
        return false;
      if (!this.server_name.equals(that.server_name))
        return false;
    }

    boolean this_present_server_script_path = true && this.isSetServer_script_path();
    boolean that_present_server_script_path = true && that.isSetServer_script_path();
    if (this_present_server_script_path || that_present_server_script_path) {
      if (!(this_present_server_script_path && that_present_server_script_path))
        return false;
      if (!this.server_script_path.equals(that.server_script_path))
        return false;
    }

    boolean this_present_wiki = true && this.isSetWiki();
    boolean that_present_wiki = true && that.isSetWiki();
    if (this_present_wiki || that_present_wiki) {
      if (!(this_present_wiki && that_present_wiki))
        return false;
      if (!this.wiki.equals(that.wiki))
        return false;
    }

    boolean this_present_minor = true && this.isSetMinor();
    boolean that_present_minor = true && that.isSetMinor();
    if (this_present_minor || that_present_minor) {
      if (!(this_present_minor && that_present_minor))
        return false;
      if (this.minor != that.minor)
        return false;
    }

    boolean this_present_patrolled = true && this.isSetPatrolled();
    boolean that_present_patrolled = true && that.isSetPatrolled();
    if (this_present_patrolled || that_present_patrolled) {
      if (!(this_present_patrolled && that_present_patrolled))
        return false;
      if (this.patrolled != that.patrolled)
        return false;
    }

    boolean this_present_length_old = true && this.isSetLength_old();
    boolean that_present_length_old = true && that.isSetLength_old();
    if (this_present_length_old || that_present_length_old) {
      if (!(this_present_length_old && that_present_length_old))
        return false;
      if (this.length_old != that.length_old)
        return false;
    }

    boolean this_present_length_new = true && this.isSetLength_new();
    boolean that_present_length_new = true && that.isSetLength_new();
    if (this_present_length_new || that_present_length_new) {
      if (!(this_present_length_new && that_present_length_new))
        return false;
      if (this.length_new != that.length_new)
        return false;
    }

    boolean this_present_revision_old = true && this.isSetRevision_old();
    boolean that_present_revision_old = true && that.isSetRevision_old();
    if (this_present_revision_old || that_present_revision_old) {
      if (!(this_present_revision_old && that_present_revision_old))
        return false;
      if (this.revision_old != that.revision_old)
        return false;
    }

    boolean this_present_revision_new = true && this.isSetRevision_new();
    boolean that_present_revision_new = true && that.isSetRevision_new();
    if (this_present_revision_new || that_present_revision_new) {
      if (!(this_present_revision_new && that_present_revision_new))
        return false;
      if (this.revision_new != that.revision_new)
        return false;
    }

    boolean this_present_log_id = true && this.isSetLog_id();
    boolean that_present_log_id = true && that.isSetLog_id();
    if (this_present_log_id || that_present_log_id) {
      if (!(this_present_log_id && that_present_log_id))
        return false;
      if (!this.log_id.equals(that.log_id))
        return false;
    }

    boolean this_present_log_type = true && this.isSetLog_type();
    boolean that_present_log_type = true && that.isSetLog_type();
    if (this_present_log_type || that_present_log_type) {
      if (!(this_present_log_type && that_present_log_type))
        return false;
      if (!this.log_type.equals(that.log_type))
        return false;
    }

    boolean this_present_log_action = true && this.isSetLog_action();
    boolean that_present_log_action = true && that.isSetLog_action();
    if (this_present_log_action || that_present_log_action) {
      if (!(this_present_log_action && that_present_log_action))
        return false;
      if (!this.log_action.equals(that.log_action))
        return false;
    }

    boolean this_present_log_params = true && this.isSetLog_params();
    boolean that_present_log_params = true && that.isSetLog_params();
    if (this_present_log_params || that_present_log_params) {
      if (!(this_present_log_params && that_present_log_params))
        return false;
      if (!this.log_params.equals(that.log_params))
        return false;
    }

    boolean this_present_log_action_comment = true && this.isSetLog_action_comment();
    boolean that_present_log_action_comment = true && that.isSetLog_action_comment();
    if (this_present_log_action_comment || that_present_log_action_comment) {
      if (!(this_present_log_action_comment && that_present_log_action_comment))
        return false;
      if (!this.log_action_comment.equals(that.log_action_comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WikiMediaChange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRc_namespace()).compareTo(other.isSetRc_namespace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRc_namespace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rc_namespace, other.rc_namespace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBot()).compareTo(other.isSetBot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bot, other.bot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_url()).compareTo(other.isSetServer_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_url, other.server_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_name()).compareTo(other.isSetServer_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_name, other.server_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_script_path()).compareTo(other.isSetServer_script_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_script_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_script_path, other.server_script_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWiki()).compareTo(other.isSetWiki());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWiki()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wiki, other.wiki);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinor()).compareTo(other.isSetMinor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minor, other.minor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatrolled()).compareTo(other.isSetPatrolled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatrolled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patrolled, other.patrolled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength_old()).compareTo(other.isSetLength_old());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength_old()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length_old, other.length_old);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength_new()).compareTo(other.isSetLength_new());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength_new()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length_new, other.length_new);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevision_old()).compareTo(other.isSetRevision_old());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision_old()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revision_old, other.revision_old);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevision_new()).compareTo(other.isSetRevision_new());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision_new()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revision_new, other.revision_new);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_id()).compareTo(other.isSetLog_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_id, other.log_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_type()).compareTo(other.isSetLog_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_type, other.log_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_action()).compareTo(other.isSetLog_action());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_action()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_action, other.log_action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_params()).compareTo(other.isSetLog_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_params, other.log_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_action_comment()).compareTo(other.isSetLog_action_comment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_action_comment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_action_comment, other.log_action_comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WikiMediaChange(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rc_namespace:");
    sb.append(this.rc_namespace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bot:");
    sb.append(this.bot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("server_url:");
    if (this.server_url == null) {
      sb.append("null");
    } else {
      sb.append(this.server_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("server_name:");
    if (this.server_name == null) {
      sb.append("null");
    } else {
      sb.append(this.server_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("server_script_path:");
    if (this.server_script_path == null) {
      sb.append("null");
    } else {
      sb.append(this.server_script_path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wiki:");
    if (this.wiki == null) {
      sb.append("null");
    } else {
      sb.append(this.wiki);
    }
    first = false;
    if (isSetMinor()) {
      if (!first) sb.append(", ");
      sb.append("minor:");
      sb.append(this.minor);
      first = false;
    }
    if (isSetPatrolled()) {
      if (!first) sb.append(", ");
      sb.append("patrolled:");
      sb.append(this.patrolled);
      first = false;
    }
    if (isSetLength_old()) {
      if (!first) sb.append(", ");
      sb.append("length_old:");
      sb.append(this.length_old);
      first = false;
    }
    if (isSetLength_new()) {
      if (!first) sb.append(", ");
      sb.append("length_new:");
      sb.append(this.length_new);
      first = false;
    }
    if (isSetRevision_old()) {
      if (!first) sb.append(", ");
      sb.append("revision_old:");
      sb.append(this.revision_old);
      first = false;
    }
    if (isSetRevision_new()) {
      if (!first) sb.append(", ");
      sb.append("revision_new:");
      sb.append(this.revision_new);
      first = false;
    }
    if (isSetLog_id()) {
      if (!first) sb.append(", ");
      sb.append("log_id:");
      if (this.log_id == null) {
        sb.append("null");
      } else {
        sb.append(this.log_id);
      }
      first = false;
    }
    if (isSetLog_type()) {
      if (!first) sb.append(", ");
      sb.append("log_type:");
      if (this.log_type == null) {
        sb.append("null");
      } else {
        sb.append(this.log_type);
      }
      first = false;
    }
    if (isSetLog_action()) {
      if (!first) sb.append(", ");
      sb.append("log_action:");
      if (this.log_action == null) {
        sb.append("null");
      } else {
        sb.append(this.log_action);
      }
      first = false;
    }
    if (isSetLog_params()) {
      if (!first) sb.append(", ");
      sb.append("log_params:");
      if (this.log_params == null) {
        sb.append("null");
      } else {
        sb.append(this.log_params);
      }
      first = false;
    }
    if (isSetLog_action_comment()) {
      if (!first) sb.append(", ");
      sb.append("log_action_comment:");
      if (this.log_action_comment == null) {
        sb.append("null");
      } else {
        sb.append(this.log_action_comment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rc_namespace' because it's a primitive and you chose the non-beans generator.
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    if (comment == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'comment' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'bot' because it's a primitive and you chose the non-beans generator.
    if (server_url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'server_url' was not present! Struct: " + toString());
    }
    if (server_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'server_name' was not present! Struct: " + toString());
    }
    if (server_script_path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'server_script_path' was not present! Struct: " + toString());
    }
    if (wiki == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'wiki' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WikiMediaChangeStandardSchemeFactory implements SchemeFactory {
    public WikiMediaChangeStandardScheme getScheme() {
      return new WikiMediaChangeStandardScheme();
    }
  }

  private static class WikiMediaChangeStandardScheme extends StandardScheme<WikiMediaChange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WikiMediaChange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RC_NAMESPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rc_namespace = iprot.readI32();
              struct.setRc_namespaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timestamp = iprot.readI32();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bot = iprot.readBool();
              struct.setBotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SERVER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server_url = iprot.readString();
              struct.setServer_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server_name = iprot.readString();
              struct.setServer_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SERVER_SCRIPT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server_script_path = iprot.readString();
              struct.setServer_script_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WIKI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wiki = iprot.readString();
              struct.setWikiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MINOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.minor = iprot.readBool();
              struct.setMinorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PATROLLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.patrolled = iprot.readBool();
              struct.setPatrolledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LENGTH_OLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length_old = iprot.readI32();
              struct.setLength_oldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LENGTH_NEW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length_new = iprot.readI32();
              struct.setLength_newIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REVISION_OLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.revision_old = iprot.readI32();
              struct.setRevision_oldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REVISION_NEW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.revision_new = iprot.readI32();
              struct.setRevision_newIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.log_id = iprot.readString();
              struct.setLog_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LOG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.log_type = iprot.readString();
              struct.setLog_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOG_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.log_action = iprot.readString();
              struct.setLog_actionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LOG_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.log_params = iprot.readString();
              struct.setLog_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // LOG_ACTION_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.log_action_comment = iprot.readString();
              struct.setLog_action_commentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRc_namespace()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rc_namespace' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBot()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bot' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WikiMediaChange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RC_NAMESPACE_FIELD_DESC);
      oprot.writeI32(struct.rc_namespace);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.comment != null) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(struct.comment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI32(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BOT_FIELD_DESC);
      oprot.writeBool(struct.bot);
      oprot.writeFieldEnd();
      if (struct.server_url != null) {
        oprot.writeFieldBegin(SERVER_URL_FIELD_DESC);
        oprot.writeString(struct.server_url);
        oprot.writeFieldEnd();
      }
      if (struct.server_name != null) {
        oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
        oprot.writeString(struct.server_name);
        oprot.writeFieldEnd();
      }
      if (struct.server_script_path != null) {
        oprot.writeFieldBegin(SERVER_SCRIPT_PATH_FIELD_DESC);
        oprot.writeString(struct.server_script_path);
        oprot.writeFieldEnd();
      }
      if (struct.wiki != null) {
        oprot.writeFieldBegin(WIKI_FIELD_DESC);
        oprot.writeString(struct.wiki);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinor()) {
        oprot.writeFieldBegin(MINOR_FIELD_DESC);
        oprot.writeBool(struct.minor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPatrolled()) {
        oprot.writeFieldBegin(PATROLLED_FIELD_DESC);
        oprot.writeBool(struct.patrolled);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLength_old()) {
        oprot.writeFieldBegin(LENGTH_OLD_FIELD_DESC);
        oprot.writeI32(struct.length_old);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLength_new()) {
        oprot.writeFieldBegin(LENGTH_NEW_FIELD_DESC);
        oprot.writeI32(struct.length_new);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRevision_old()) {
        oprot.writeFieldBegin(REVISION_OLD_FIELD_DESC);
        oprot.writeI32(struct.revision_old);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRevision_new()) {
        oprot.writeFieldBegin(REVISION_NEW_FIELD_DESC);
        oprot.writeI32(struct.revision_new);
        oprot.writeFieldEnd();
      }
      if (struct.log_id != null) {
        if (struct.isSetLog_id()) {
          oprot.writeFieldBegin(LOG_ID_FIELD_DESC);
          oprot.writeString(struct.log_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.log_type != null) {
        if (struct.isSetLog_type()) {
          oprot.writeFieldBegin(LOG_TYPE_FIELD_DESC);
          oprot.writeString(struct.log_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.log_action != null) {
        if (struct.isSetLog_action()) {
          oprot.writeFieldBegin(LOG_ACTION_FIELD_DESC);
          oprot.writeString(struct.log_action);
          oprot.writeFieldEnd();
        }
      }
      if (struct.log_params != null) {
        if (struct.isSetLog_params()) {
          oprot.writeFieldBegin(LOG_PARAMS_FIELD_DESC);
          oprot.writeString(struct.log_params);
          oprot.writeFieldEnd();
        }
      }
      if (struct.log_action_comment != null) {
        if (struct.isSetLog_action_comment()) {
          oprot.writeFieldBegin(LOG_ACTION_COMMENT_FIELD_DESC);
          oprot.writeString(struct.log_action_comment);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WikiMediaChangeTupleSchemeFactory implements SchemeFactory {
    public WikiMediaChangeTupleScheme getScheme() {
      return new WikiMediaChangeTupleScheme();
    }
  }

  private static class WikiMediaChangeTupleScheme extends TupleScheme<WikiMediaChange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WikiMediaChange struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeI32(struct.type);
      oprot.writeI32(struct.rc_namespace);
      oprot.writeString(struct.title);
      oprot.writeString(struct.comment);
      oprot.writeI32(struct.timestamp);
      oprot.writeString(struct.user);
      oprot.writeBool(struct.bot);
      oprot.writeString(struct.server_url);
      oprot.writeString(struct.server_name);
      oprot.writeString(struct.server_script_path);
      oprot.writeString(struct.wiki);
      BitSet optionals = new BitSet();
      if (struct.isSetMinor()) {
        optionals.set(0);
      }
      if (struct.isSetPatrolled()) {
        optionals.set(1);
      }
      if (struct.isSetLength_old()) {
        optionals.set(2);
      }
      if (struct.isSetLength_new()) {
        optionals.set(3);
      }
      if (struct.isSetRevision_old()) {
        optionals.set(4);
      }
      if (struct.isSetRevision_new()) {
        optionals.set(5);
      }
      if (struct.isSetLog_id()) {
        optionals.set(6);
      }
      if (struct.isSetLog_type()) {
        optionals.set(7);
      }
      if (struct.isSetLog_action()) {
        optionals.set(8);
      }
      if (struct.isSetLog_params()) {
        optionals.set(9);
      }
      if (struct.isSetLog_action_comment()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetMinor()) {
        oprot.writeBool(struct.minor);
      }
      if (struct.isSetPatrolled()) {
        oprot.writeBool(struct.patrolled);
      }
      if (struct.isSetLength_old()) {
        oprot.writeI32(struct.length_old);
      }
      if (struct.isSetLength_new()) {
        oprot.writeI32(struct.length_new);
      }
      if (struct.isSetRevision_old()) {
        oprot.writeI32(struct.revision_old);
      }
      if (struct.isSetRevision_new()) {
        oprot.writeI32(struct.revision_new);
      }
      if (struct.isSetLog_id()) {
        oprot.writeString(struct.log_id);
      }
      if (struct.isSetLog_type()) {
        oprot.writeString(struct.log_type);
      }
      if (struct.isSetLog_action()) {
        oprot.writeString(struct.log_action);
      }
      if (struct.isSetLog_params()) {
        oprot.writeString(struct.log_params);
      }
      if (struct.isSetLog_action_comment()) {
        oprot.writeString(struct.log_action_comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WikiMediaChange struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.rc_namespace = iprot.readI32();
      struct.setRc_namespaceIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      struct.comment = iprot.readString();
      struct.setCommentIsSet(true);
      struct.timestamp = iprot.readI32();
      struct.setTimestampIsSet(true);
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.bot = iprot.readBool();
      struct.setBotIsSet(true);
      struct.server_url = iprot.readString();
      struct.setServer_urlIsSet(true);
      struct.server_name = iprot.readString();
      struct.setServer_nameIsSet(true);
      struct.server_script_path = iprot.readString();
      struct.setServer_script_pathIsSet(true);
      struct.wiki = iprot.readString();
      struct.setWikiIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.minor = iprot.readBool();
        struct.setMinorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.patrolled = iprot.readBool();
        struct.setPatrolledIsSet(true);
      }
      if (incoming.get(2)) {
        struct.length_old = iprot.readI32();
        struct.setLength_oldIsSet(true);
      }
      if (incoming.get(3)) {
        struct.length_new = iprot.readI32();
        struct.setLength_newIsSet(true);
      }
      if (incoming.get(4)) {
        struct.revision_old = iprot.readI32();
        struct.setRevision_oldIsSet(true);
      }
      if (incoming.get(5)) {
        struct.revision_new = iprot.readI32();
        struct.setRevision_newIsSet(true);
      }
      if (incoming.get(6)) {
        struct.log_id = iprot.readString();
        struct.setLog_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.log_type = iprot.readString();
        struct.setLog_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.log_action = iprot.readString();
        struct.setLog_actionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.log_params = iprot.readString();
        struct.setLog_paramsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.log_action_comment = iprot.readString();
        struct.setLog_action_commentIsSet(true);
      }
    }
  }

}

